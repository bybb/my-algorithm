# 리스트 자료형(List)
print("==============================================")
print("리스트 자료형(List)")
# 여러 개의 데이터를 연속적으로 담아 처리하기 위해 사용하는 자료형
# C나 자바의 배열(Array)의 기능 및 연결리스트와 유사한 기능을 지원한다.
# C++의 STL vector와 기능적으로 유사하다.
# 리스트 혹은 배열 혹은 테이블이라고도 불린다.

# 리스트 초기화
# 대괄호 안에 원소를 넣어 초기화하며 쉼표(,)로 원소를 구분한다.
# 비어 있는 리스트를 선언할 때는 list() 혹은 []를 이용할 수 있다.
# 리스트의 원소에 접근할 때는 인덱스값을 괄호에 넣는다.

# 직접 데이터를 넣어 초기화
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print(a)

# 네 번째 원소만 출력
print(a[3])

# 크기가 N이고, 모든 값이 0인 1차원 리스트 초기화
n = 10
a = [0] * n
print(a)

# 인덱스 값을 입력하여 리스트의 특정한 원소에 접근하는 것을 인덱싱이라고 한다.
# 인덱스 값은 양의 정수, 음의 정수 모두 사용할 수 있다.
# 음의 정수를 넣으면 원소를 거꾸로 탐색한다.

a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# 여덟 번째 원소만 출력
print(a[7])

# 뒤에서 첫 번째 원소 출력
print(a[-1])

# 뒤에서 세 번쨰 원소 출력
print(a[-3])

# 네 번째 원소 값 변경
a[3] = 7
print(a)

# 리스트에서 연속적인 위치를 갖는 원소들을 가져와야 할 때는 슬라이싱을 이요한다.
# 대괄호 안에 콜론(:)을 넣어서 시작 인덱스와 끝 인덱스를 설정할 수 있다.
# 끝 인덱스는 실제 인덱스보다 1을 더 크게 설정한다.
a = [1, 2, 3, 4, 5, 6, 7, 8, 9]

# 네 번째 원소만 출력
print(a[3])

# 두 번째 원소부터 네 번째 원소까지
print(a[1:4])

# 리스트 컴프리헨션
# 리스트를 초기화하는 방법 중 하나이다.
# 대괄호 안에 조건문과 반복문을 적용하여 리스트를 초기화 할 수 있다.

# 0부터 9까지의 수를 포함하는 리스트
array = [i for i in range(10)]
print(array)

# 0부터 19까지의 수 중에서 홀수만 포함하는 리스트
array = [i for i in range(20) if i % 2==1]
print(array)

# 1부터 9까지의 수들의 제곱 값을 포함하는 리스트
array = [i * i for i in range(10)]
print(array)

# 코드1 - 리스트 컴프리헨션
array = [i for i in range(20) if i % 2==1]
print(array)

# 코드2 - 일반적인 코드
array = []
for i in range(20):
  if i%2 == 1:
    array.append(i)
print(array)

# 리스트 컴프리헨션은 2차원 리스트를 초기화할 때 효과적으로 사용될 수 있다.
# N X M 크기의 2차원 리스트를 한번에 초기화 해야 할 때 매우 유용하다.
# 예) array = [[0] * m for _in range(n)]
# 만약 2차원 리스트를 초기화할 때 다음과 같이 작성하면 예기치 않은 결과가 나올 수 있다.
# 잘못된 예시) array = [[0]*m]*n
# 위 코드는 전체 리스트 안에 포함된 각 리스트가 모두 같은 객체로 인식

# N X M 크기의 2차원 리스트 초기화
n = 4
m = 3
array = [[0] * m for _ in range(n)]
print(array)

# N X M 크기의 2차원 리스트 초기화(잘못된 방법)
n = 4
m = 3
array = [[0] * m] * n
print(array)

array[1][1] = 5
print(array)

# 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할 때 언더바(_) 사용
#코드1 - 1부터 9까지의 자연수를 더하기
summary = 0
for i in range(1,10):
  summary += i
print(summary)

#코드2 - "Hello World"를 5번 출력하기
for _ in range(5):
  print("Hello World")

# 자주쓰는 리스트 함수
# append() - 원소 삽입 - O(1)
# sort(), sort(reverse=True) - 오름차순, 내림차순 정렬 - O(NlogN)
# reserve() - 모든 원소 순서 반대로 - O(N)
# insert(인덱스,값)) - 특정한 인덱스에 원소 삽입 - O(N)
# count(특정값) - 특정값을 가지는 데이터 개수를 셀 때 - O(N)
# remove(특정값) - 특정값을 갖는 원솔르 제거, 여러개면 한개만 제거 - O(N)

a = [1, 4, 3]
print("기본 리스트:", a)

# 리스트에 원소 삽입
a.append(2)
print(a)

# 오름차순 정렬
a.sort()
print(a)

# 내림차순 정렬
a.sort(reverse=True)
print(a)

a = [4, 3, 2, 1]

# 리스트 원소 뒤집기
a.reverse()
print("원소 뒤집기:" ,a)

# 특정 인덱스에 데이터 추가
a.insert(2,3)
print("인덱스 2에 3 추가:", a)

# 특정 값인 데이터 개수 세기
print("값이 3인 데이터 개수:", a.count(3))

# 특정 값 데이터 삭제
a.remove(1)
print("값이 1인 데이터 삭제:", a)

print("==============================================")

a = [1, 2, 3, 4, 5, 5, 5]
remove_set = {3,5} # 집합 자료형

# remove_list에 포함되지 않은 값만을 저장
result = [i for i in a if i not in remove_set]
print(result)